# Script d'audit de s√©curit√© pour Vital Sync (Windows)
# security-audit.ps1

Write-Host "üîí AUDIT DE S√âCURIT√â - VITAL SYNC" -ForegroundColor Blue
Write-Host "=================================" -ForegroundColor Blue

$issues = 0

# 1. Recherche de console.log dangereux
Write-Host "`n1. üîç Recherche de console.log dangereux..." -ForegroundColor Yellow

$consoleLogs = @()
Get-ChildItem -Path "src" -Recurse -Include "*.ts", "*.tsx" | ForEach-Object {
    $content = Get-Content $_.FullName -Raw
    if ($content -match "console\.log" -and $content -notmatch "NODE_ENV") {
        $lines = ($content -split "`n" | Where-Object { $_ -match "console\.log" -and $_ -notmatch "NODE_ENV" })
        foreach ($line in $lines) {
            $consoleLogs += "$($_.Name): $($line.Trim())"
        }
    }
}

if ($consoleLogs.Count -gt 0) {
    Write-Host "‚ùå $($consoleLogs.Count) console.log dangereux trouv√©s" -ForegroundColor Red
    $consoleLogs | Select-Object -First 5 | ForEach-Object { Write-Host "  $_" -ForegroundColor Red }
    if ($consoleLogs.Count -gt 5) {
        Write-Host "  ... et $($consoleLogs.Count - 5) autres" -ForegroundColor Red
    }
    $issues++
} else {
    Write-Host "‚úÖ Aucun console.log dangereux trouv√©" -ForegroundColor Green
}

# 2. V√©rification variables d'environnement
Write-Host "`n2. üîê V√©rification des variables d'environnement..." -ForegroundColor Yellow

if (Test-Path ".env") {
    $envContent = Get-Content ".env" -Raw
    $dangerousVars = @()
    
    if ($envContent -match "NEXT_PUBLIC_.*SECRET|NEXT_PUBLIC_.*PASSWORD|NEXT_PUBLIC_.*KEY") {
        $envContent -split "`n" | Where-Object { $_ -match "NEXT_PUBLIC_.*SECRET|NEXT_PUBLIC_.*PASSWORD|NEXT_PUBLIC_.*KEY" } | ForEach-Object {
            $dangerousVars += $_.Trim()
        }
    }
    
    if ($dangerousVars.Count -gt 0) {
        Write-Host "‚ùå Variables secr√®tes expos√©es c√¥t√© client d√©tect√©es" -ForegroundColor Red
        $dangerousVars | ForEach-Object { Write-Host "  $_" -ForegroundColor Red }
        $issues++
    } else {
        Write-Host "‚úÖ Pas de secrets expos√©s c√¥t√© client" -ForegroundColor Green
    }
} else {
    Write-Host "‚ö†Ô∏è Fichier .env non trouv√©" -ForegroundColor Yellow
}

# 3. V√©rification des d√©pendances
Write-Host "`n3. üõ°Ô∏è V√©rification des d√©pendances..." -ForegroundColor Yellow

try {
    $auditResult = npm audit --audit-level=moderate --json | ConvertFrom-Json
    if ($auditResult.metadata.vulnerabilities.total -gt 0) {
        Write-Host "‚ùå $($auditResult.metadata.vulnerabilities.total) vuln√©rabilit√©s d√©tect√©es" -ForegroundColor Red
        Write-Host "Ex√©cutez: npm audit pour plus de d√©tails" -ForegroundColor Red
        $issues++
    } else {
        Write-Host "‚úÖ D√©pendances s√©curis√©es" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è Impossible de v√©rifier les d√©pendances" -ForegroundColor Yellow
}

# 4. V√©rification des routes API
Write-Host "`n4. üîí V√©rification des routes API..." -ForegroundColor Yellow

$unprotectedRoutes = @()
Get-ChildItem -Path "src\app\api" -Recurse -Include "*.ts" | ForEach-Object {
    $content = Get-Content $_.FullName -Raw
    if ($content -match "export async function" -and $content -notmatch "getServerSession") {
        $unprotectedRoutes += $_.Name
    }
}

if ($unprotectedRoutes.Count -gt 0) {
    Write-Host "‚ö†Ô∏è $($unprotectedRoutes.Count) routes API potentiellement non prot√©g√©es" -ForegroundColor Yellow
    Write-Host "Fichiers √† v√©rifier manuellement :"
    $unprotectedRoutes | Select-Object -First 3 | ForEach-Object { Write-Host "  $_" -ForegroundColor Yellow }
} else {
    Write-Host "‚úÖ Toutes les routes semblent prot√©g√©es" -ForegroundColor Green
}

# 5. V√©rification des logs sensibles
Write-Host "`n5. üìù V√©rification des logs sensibles..." -ForegroundColor Yellow

$sensitiveLogs = @()
Get-ChildItem -Path "src" -Recurse -Include "*.ts", "*.tsx" | ForEach-Object {
    $content = Get-Content $_.FullName -Raw
    if ($content -match "(password|token|secret).*console|console.*(password|token|secret)") {
        $lines = ($content -split "`n" | Where-Object { $_ -match "(password|token|secret).*console|console.*(password|token|secret)" })
        foreach ($line in $lines) {
            $sensitiveLogs += "$($_.Name): $($line.Trim())"
        }
    }
}

if ($sensitiveLogs.Count -gt 0) {
    Write-Host "‚ùå Logs de donn√©es sensibles d√©tect√©s" -ForegroundColor Red
    $sensitiveLogs | Select-Object -First 3 | ForEach-Object { Write-Host "  $_" -ForegroundColor Red }
    $issues++
} else {
    Write-Host "‚úÖ Pas de logs de donn√©es sensibles" -ForegroundColor Green
}

# 6. V√©rification des headers de s√©curit√©
Write-Host "`n6. üåê V√©rification des headers de s√©curit√©..." -ForegroundColor Yellow

if (Test-Path "src\app\layout.tsx") {
    $layoutContent = Get-Content "src\app\layout.tsx" -Raw
    if ($layoutContent -match "X-Frame-Options|X-Content-Type-Options|X-XSS-Protection") {
        Write-Host "‚úÖ Headers de s√©curit√© configur√©s" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Headers de s√©curit√© manquants" -ForegroundColor Red
        $issues++
    }
} else {
    Write-Host "‚ö†Ô∏è Fichier layout.tsx non trouv√©" -ForegroundColor Yellow
}

# 7. V√©rification des secrets hardcod√©s
Write-Host "`n7. üö´ V√©rification des secrets hardcod√©s..." -ForegroundColor Yellow

$hardcodedSecrets = @()
Get-ChildItem -Path "src" -Recurse -Include "*.ts", "*.tsx" | ForEach-Object {
    $content = Get-Content $_.FullName -Raw
    if ($content -match "(password|secret|key)\s*=\s*[`"'][^`"']+[`"']") {
        $matches = [regex]::Matches($content, "(password|secret|key)\s*=\s*[`"'][^`"']+[`"']")
        foreach ($match in $matches) {
            if ($match.Value -notmatch "process\.env|config\.|import") {
                $hardcodedSecrets += "$($_.Name): $($match.Value)"
            }
        }
    }
}

if ($hardcodedSecrets.Count -gt 0) {
    Write-Host "‚ùå Secrets potentiellement hardcod√©s d√©tect√©s" -ForegroundColor Red
    $hardcodedSecrets | Select-Object -First 3 | ForEach-Object { Write-Host "  $_" -ForegroundColor Red }
    $issues++
} else {
    Write-Host "‚úÖ Pas de secrets hardcod√©s d√©tect√©s" -ForegroundColor Green
}

# 8. V√©rification du package.json
Write-Host "`n8. üì¶ V√©rification du package.json..." -ForegroundColor Yellow

if (Test-Path "package.json") {
    $packageContent = Get-Content "package.json" -Raw
    if ($packageContent -match '"start".*"next start"') {
        Write-Host "‚úÖ Script de production configur√©" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è V√©rifiez la configuration de production" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚ùå Fichier package.json non trouv√©" -ForegroundColor Red
}

# R√©sum√©
Write-Host "`nüéØ R√âSUM√â DE L'AUDIT" -ForegroundColor Blue
Write-Host "===================" -ForegroundColor Blue

if ($issues -eq 0) {
    Write-Host "‚úÖ EXCELLENT ! Aucun probl√®me critique d√©tect√©" -ForegroundColor Green
    Write-Host "Score de s√©curit√©: üü¢ √âLEV√â" -ForegroundColor Green
} elseif ($issues -le 2) {
    Write-Host "‚ö†Ô∏è $issues probl√®me(s) d√©tect√©(s) - Corrections recommand√©es" -ForegroundColor Yellow
    Write-Host "Score de s√©curit√©: üü° MOYEN" -ForegroundColor Yellow
} else {
    Write-Host "‚ùå $issues probl√®mes critiques d√©tect√©s - CORRECTIONS URGENTES" -ForegroundColor Red
    Write-Host "Score de s√©curit√©: üî¥ FAIBLE" -ForegroundColor Red
}

Write-Host "`nüìã ACTIONS RECOMMAND√âES:" -ForegroundColor Blue
if ($consoleLogs.Count -gt 0) {
    Write-Host "1. Supprimer ou conditionner tous les console.log" -ForegroundColor Yellow
}
if ($dangerousVars.Count -gt 0) {
    Write-Host "2. D√©placer les secrets vers des variables serveur" -ForegroundColor Yellow
}
if ($unprotectedRoutes.Count -gt 0) {
    Write-Host "3. V√©rifier l'authentification sur toutes les routes API" -ForegroundColor Yellow
}
if ($sensitiveLogs.Count -gt 0) {
    Write-Host "4. Supprimer les logs de donn√©es sensibles" -ForegroundColor Yellow
}
if ($issues -eq 0) {
    Write-Host "‚úÖ Continuer la surveillance et effectuer des audits r√©guliers" -ForegroundColor Green
}

Write-Host "`nüîó RESSOURCES UTILES:" -ForegroundColor Blue
Write-Host "- Documentation s√©curit√© Next.js: https://nextjs.org/docs/advanced-features/security-headers"
Write-Host "- OWASP Top 10: https://owasp.org/www-project-top-ten/"
Write-Host "- Guide s√©curit√© React: https://snyk.io/blog/10-react-security-best-practices/"

Write-Host "`nAppuyez sur une touche pour continuer..." -ForegroundColor Gray
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")