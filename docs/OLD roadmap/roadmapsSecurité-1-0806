# üõ°Ô∏è Roadmap S√©curisation - Patient Management System

## üìä √âtat actuel de la s√©curit√© : **CRITIQUE** üö®

### Vuln√©rabilit√©s identifi√©es
- ‚ùå **5+ ports expos√©s** publiquement (3000, 8001, 5433, 4000...)
- ‚ùå **Base de donn√©es accessible** depuis Internet (port 5433)
- ‚ùå **Aucune authentification** sur l'application
- ‚ùå **Pas de gestion des r√¥les** utilisateur
- ‚ùå **Studio Supabase** expos√© sans protection
- ‚ùå **Pas de SSL/TLS** configur√©
- ‚ùå **Donn√©es m√©dicales** non s√©curis√©es (RGPD non conforme)

### Niveau de risque : **TR√àS √âLEV√â** üî¥
- Donn√©es de sant√© expos√©es ‚Üí Sanctions RGPD possibles
- Acc√®s non contr√¥l√© ‚Üí Modification/suppression de donn√©es
- Surface d'attaque importante ‚Üí Exploitation facile

---

## üéØ Objectifs de s√©curisation

### Objectifs principaux
1. **R√©duire la surface d'attaque** de 5+ ports √† 2 ports
2. **Isoler compl√®tement** la base de donn√©es  
3. **Impl√©menter l'authentification** forte
4. **Configurer SSL/TLS** automatique
5. **Mettre en place les r√¥les** utilisateur
6. **Conformit√© RGPD** renforc√©e

### R√©sultat vis√©
üéØ **Transformation : Application vuln√©rable ‚Üí S√©curit√© niveau enterprise**

---

## üìÖ Planning de s√©curisation (3-4 semaines)

## Phase 1 : URGENCE S√âCURITAIRE (2-3 jours) üö®

> **Objectif** : √âliminer les vuln√©rabilit√©s critiques imm√©diates

### √âtape 1.1 : Fermeture des ports expos√©s (30 min) ‚ö°
**Priorit√© : CRITIQUE - √Ä faire IMM√âDIATEMENT**

```bash
# Sur le serveur VPS
cd /home/supabase-project
nano docker-compose.yml

# Supprimer toutes les lignes ports: dans :
# - db (supprimer "5433:5432") 
# - analytics (supprimer "4000:4000")
# - Garder seulement kong (8001) et studio (3000) temporairement

docker compose down && docker compose up -d
```

**Validation :**
```bash
sudo netstat -tlnp | grep -E ":(5432|5433|4000)"
# R√©sultat attendu : AUCUN port list√©
```

**Impact :** ‚úÖ Base de donn√©es maintenant inaccessible depuis Internet

### √âtape 1.2 : Configuration firewall restrictif (15 min)

```bash
# D√©sactiver UFW temporairement pour reconfigurer
sudo ufw --force reset

# Autoriser seulement les ports essentiels
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw allow 22/tcp    # SSH
sudo ufw allow 80/tcp    # HTTP
sudo ufw allow 443/tcp   # HTTPS  
sudo ufw allow 3000/tcp  # Studio (temporaire)
sudo ufw allow 8001/tcp  # API (temporaire)

sudo ufw --force enable
sudo ufw status numbered
```

**Impact :** ‚úÖ Firewall restrictif configur√©

### √âtape 1.3 : Sauvegarde s√©curis√©e (30 min)

```bash
# Backup complet avant modifications
cd /home/supabase-project
tar -czf backup-$(date +%Y%m%d).tar.gz volumes/ docker-compose.yml .env

# Test de restauration des donn√©es
pg_dump "postgresql://postgres:PASSWORD@localhost:5432/postgres" > backup-data.sql
```

**Impact :** ‚úÖ Sauvegarde de s√©curit√© cr√©√©e

### ‚úÖ Validation Phase 1
- [ ] Ports 5433, 4000 ferm√©s
- [ ] Firewall configur√©  
- [ ] Sauvegarde cr√©√©e
- [ ] Application toujours fonctionnelle

---

## Phase 2 : TRAEFIK - REVERSE PROXY (3-4 jours) üîí

> **Objectif** : Impl√©menter le point d'entr√©e unique s√©curis√©

### √âtape 2.1 : Pr√©paration de l'environnement (1 jour)

#### Configuration DNS (si domaine disponible)
```bash
# Configurer les sous-domaines
app.votre-domaine.com      ‚Üí IP du serveur
api.votre-domaine.com      ‚Üí IP du serveur  
admin.votre-domaine.com    ‚Üí IP du serveur
monitoring.votre-domaine.com ‚Üí IP du serveur
```

#### Cr√©ation de la structure Traefik
```bash
mkdir -p /home/traefik-config/{certs,config,logs}
mkdir -p /home/monitoring/{prometheus,grafana}
```

### √âtape 2.2 : Configuration Traefik (1 jour)

#### Cr√©ation docker-compose.traefik.yml
```yaml
# Utiliser l'architecture compl√®te fournie pr√©c√©demment
# Adapter les domaines selon votre configuration
```

#### Configuration des certificats SSL
```bash
# Pr√©paration Let's Encrypt
touch /home/traefik-config/certs/acme.json
chmod 600 /home/traefik-config/certs/acme.json
```

### √âtape 2.3 : Migration progressive vers Traefik (1-2 jours)

#### Jour 1 : Test en parall√®le
```bash
# Lancer Traefik en parall√®le du setup actuel
docker network create traefik
cd /home/traefik-config
docker compose -f docker-compose.traefik.yml up -d traefik

# Tests de fonctionnement
curl -I https://app.votre-domaine.com
```

#### Jour 2 : Basculement complet
```bash
# Arr√™t de l'ancienne configuration
cd /home/supabase-project  
docker compose down

# Migration vers nouvelle architecture
docker compose -f /home/traefik-config/docker-compose.traefik.yml up -d
```

### ‚úÖ Validation Phase 2
- [ ] Traefik op√©rationnel
- [ ] SSL automatique fonctionnel
- [ ] Tous services accessibles via domaines
- [ ] Seuls ports 80/443 expos√©s
- [ ] Studio s√©curis√© avec authentification

---

## Phase 3 : AUTHENTIFICATION & R√îLES (5-7 jours) üë•

> **Objectif** : S√©curiser l'acc√®s √† l'application avec gestion des r√¥les

### √âtape 3.1 : Choix et configuration du provider d'auth (2 jours)

#### Option A : Kinde (Recommand√© pour le m√©dical)
```bash
npm install @kinde-oss/kinde-auth-nextjs
```

**Avantages Kinde :**
- ‚úÖ Sp√©cialis√© authentification
- ‚úÖ Conformit√© RGPD native  
- ‚úÖ 2FA int√©gr√©
- ‚úÖ Audit logs d√©taill√©s
- ‚úÖ Interface admin avanc√©e

**Configuration Kinde :**
```javascript
// .env.local
KINDE_CLIENT_ID=your_client_id
KINDE_CLIENT_SECRET=your_client_secret
KINDE_ISSUER_URL=https://your-domain.kinde.com
KINDE_SITE_URL=https://app.votre-domaine.com
KINDE_POST_LOGOUT_REDIRECT_URL=https://app.votre-domaine.com
KINDE_POST_LOGIN_REDIRECT_URL=https://app.votre-domaine.com/dashboard
```

#### Option B : Supabase Auth (Si budget limit√©)
```bash
# Configuration Supabase Auth
# D√©j√† int√©gr√©, configuration dans .env
```

### √âtape 3.2 : D√©finition des r√¥les (1 jour)

#### Matrice des permissions
```typescript
// types/auth.ts
export enum UserRole {
  INFIRMIER = 'INFIRMIER',
  ADMIN = 'ADMIN', 
  SUPER_ADMIN = 'SUPER_ADMIN'
}

export const PERMISSIONS = {
  // Patients
  READ_PATIENTS: [UserRole.INFIRMIER, UserRole.ADMIN, UserRole.SUPER_ADMIN],
  CREATE_PATIENTS: [UserRole.INFIRMIER, UserRole.ADMIN, UserRole.SUPER_ADMIN],
  UPDATE_PATIENTS: [UserRole.INFIRMIER, UserRole.ADMIN, UserRole.SUPER_ADMIN],
  DELETE_PATIENTS: [UserRole.ADMIN, UserRole.SUPER_ADMIN],
  
  // Entretiens  
  READ_ENTRETIENS: [UserRole.INFIRMIER, UserRole.ADMIN, UserRole.SUPER_ADMIN],
  CREATE_ENTRETIENS: [UserRole.INFIRMIER, UserRole.ADMIN, UserRole.SUPER_ADMIN],
  UPDATE_ENTRETIENS: [UserRole.INFIRMIER, UserRole.ADMIN, UserRole.SUPER_ADMIN],
  DELETE_ENTRETIENS: [UserRole.ADMIN, UserRole.SUPER_ADMIN],
  
  // Administration
  MANAGE_USERS: [UserRole.ADMIN, UserRole.SUPER_ADMIN],
  SYSTEM_CONFIG: [UserRole.ADMIN, UserRole.SUPER_ADMIN],
  VIEW_LOGS: [UserRole.ADMIN, UserRole.SUPER_ADMIN],
  DATABASE_ACCESS: [UserRole.SUPER_ADMIN]
}
```

### √âtape 3.3 : Impl√©mentation des pages d'authentification (2 jours)

#### Page de connexion
```typescript
// app/login/page.tsx
import { LoginLink } from "@kinde-oss/kinde-auth-nextjs/components";

export default function Login() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-medical-gradient">
      <div className="bg-white p-8 rounded-lg shadow-xl max-w-md w-full">
        <h1 className="text-2xl font-bold text-center mb-8">
          Connexion S√©curis√©e
        </h1>
        <LoginLink className="w-full bg-blue-600 text-white py-3 px-6 rounded-lg hover:bg-blue-700 transition">
          Se connecter
        </LoginLink>
      </div>
    </div>
  );
}
```

#### Middleware de protection
```typescript
// middleware.ts
import { withAuth } from "@kinde-oss/kinde-auth-nextjs/middleware";

export default withAuth(
  function middleware(req) {
    // Protection des routes sensibles
    if (req.nextUrl.pathname.startsWith('/admin')) {
      // V√©rifier r√¥le ADMIN
    }
  },
  {
    callbacks: {
      authorized: ({ token, req }) => {
        // Logique d'autorisation
        return !!token;
      },
    },
  }
);
```

### √âtape 3.4 : Protection des API routes (1-2 jours)

#### Middleware d'autorisation
```typescript
// lib/auth-middleware.ts
export async function requireAuth(
  request: Request,
  requiredPermission: string
) {
  const user = await getKindeServerSession();
  
  if (!user.isAuthenticated) {
    return new Response('Unauthorized', { status: 401 });
  }
  
  if (!hasPermission(user, requiredPermission)) {
    return new Response('Forbidden', { status: 403 });
  }
  
  // Log de l'action pour audit
  await auditLog({
    userId: user.user?.id,
    action: requiredPermission,
    timestamp: new Date(),
    ip: request.headers.get('x-forwarded-for'),
    userAgent: request.headers.get('user-agent')
  });
  
  return null; // Autorisation accord√©e
}
```

#### Exemple d'API prot√©g√©e
```typescript
// app/api/patients/route.ts
export async function GET(request: Request) {
  const authError = await requireAuth(request, 'READ_PATIENTS');
  if (authError) return authError;
  
  // Logique m√©tier...
}
```

### ‚úÖ Validation Phase 3
- [ ] Provider d'authentification configur√©
- [ ] R√¥les d√©finis et impl√©ment√©s
- [ ] Pages de connexion/d√©connexion
- [ ] Middleware de protection op√©rationnel
- [ ] API routes s√©curis√©es
- [ ] Tests d'autorisation r√©ussis

---

## Phase 4 : S√âCURISATION BASE DE DONN√âES (2-3 jours) üóÑÔ∏è

> **Objectif** : Impl√©menter Row Level Security et chiffrement

### √âtape 4.1 : Configuration Row Level Security (1 jour)

#### Activation RLS sur toutes les tables
```sql
-- Activer RLS
ALTER TABLE "Patient" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "Entretien" ENABLE ROW LEVEL SECURITY; 
ALTER TABLE "CalendarEvent" ENABLE ROW LEVEL SECURITY;
-- ... autres tables sensibles
```

#### Politiques de s√©curit√©
```sql
-- Politique pour les patients (INFIRMIER peut voir tous)
CREATE POLICY "infirmier_can_view_patients" ON "Patient"
  FOR SELECT USING (
    current_setting('request.jwt.claims', true)::json->>'role' IN ('INFIRMIER', 'ADMIN', 'SUPER_ADMIN')
  );

-- Politique pour les entretiens (cr√©ateur + ADMIN)
CREATE POLICY "user_can_modify_own_entretiens" ON "Entretien"
  FOR ALL USING (
    "createdBy" = current_setting('request.jwt.claims', true)::json->>'sub' OR
    current_setting('request.jwt.claims', true)::json->>'role' IN ('ADMIN', 'SUPER_ADMIN')
  );
```

### √âtape 4.2 : Chiffrement des donn√©es sensibles (1 jour)

#### Chiffrement c√¥t√© application
```typescript
// lib/encryption.ts
import CryptoJS from 'crypto-js';

const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY!;

export function encryptSensitiveData(data: string): string {
  return CryptoJS.AES.encrypt(data, ENCRYPTION_KEY).toString();
}

export function decryptSensitiveData(encryptedData: string): string {
  const bytes = CryptoJS.AES.decrypt(encryptedData, ENCRYPTION_KEY);
  return bytes.toString(CryptoJS.enc.Utf8);
}
```

### √âtape 4.3 : Audit et logs de s√©curit√© (1 jour)

#### Table d'audit
```sql
CREATE TABLE "AuditLog" (
  id SERIAL PRIMARY KEY,
  "userId" TEXT NOT NULL,
  action TEXT NOT NULL,
  "tableName" TEXT,
  "recordId" TEXT,
  "oldValues" JSONB,
  "newValues" JSONB, 
  "ipAddress" TEXT,
  "userAgent" TEXT,
  "timestamp" TIMESTAMP DEFAULT NOW()
);
```

### ‚úÖ Validation Phase 4
- [ ] RLS activ√© sur toutes les tables
- [ ] Politiques de s√©curit√© configur√©es
- [ ] Chiffrement des donn√©es sensibles
- [ ] Syst√®me d'audit op√©rationnel
- [ ] Tests de permissions par r√¥le

---

## Phase 5 : MONITORING & ALERTES (2-3 jours) üìä

> **Objectif** : Surveillance en temps r√©el et alertes de s√©curit√©

### √âtape 5.1 : Configuration monitoring Traefik (1 jour)

#### Prometheus + Grafana
```yaml
# D√©j√† inclus dans docker-compose.traefik.yml
# Configuration des m√©triques Traefik
```

#### Dashboard de s√©curit√©
- Tentatives de connexion √©chou√©es
- Taux d'erreur par endpoint
- Latence des requ√™tes
- Alertes en temps r√©el

### √âtape 5.2 : Syst√®me d'alertes (1 jour)

#### Configuration des seuils d'alerte
```yaml
# prometheus/alerts.yml
groups:
  - name: security_alerts
    rules:
      - alert: TooManyFailedLogins
        expr: increase(traefik_requests_total{code=~"4.."}[5m]) > 10
        for: 1m
        annotations:
          summary: "Trop de tentatives de connexion √©chou√©es"
          
      - alert: DatabaseAccessAttempt
        expr: increase(postgres_connections_total[1m]) > 0
        annotations:
          summary: "Tentative d'acc√®s direct √† la base de donn√©es"
```

### √âtape 5.3 : Logs centralis√©s (1 jour)

#### Configuration Loki + Grafana Logs
```yaml
# Configuration pour centraliser tous les logs
# Application + Traefik + Base de donn√©es
```

### ‚úÖ Validation Phase 5
- [ ] Monitoring op√©rationnel
- [ ] Dashboard s√©curit√© configur√©
- [ ] Alertes automatiques actives
- [ ] Logs centralis√©s fonctionnels

---

## Phase 6 : CONFORMIT√â RGPD (2-3 jours) üìã

> **Objectif** : Mise en conformit√© avec le RGPD

### √âtape 6.1 : Gestion du consentement (1 jour)

#### Interface de consentement
```typescript
// Composant de gestion du consentement
// Enregistrement des choix utilisateur
// Tra√ßabilit√© des consentements
```

### √âtape 6.2 : Droits des personnes (1 jour)

#### Export des donn√©es personnelles
```typescript
// API d'export des donn√©es utilisateur
// Format standardis√© (JSON/XML)
// Chiffrement du fichier d'export
```

#### Droit √† l'effacement
```typescript
// Suppression compl√®te et d√©finitive
// Anonymisation des donn√©es li√©es
// Confirmation de suppression
```

### √âtape 6.3 : Documentation RGPD (1 jour)

#### Registre des traitements
- Finalit√©s du traitement
- Cat√©gories de donn√©es
- Destinataires
- Dur√©es de conservation
- Mesures de s√©curit√©

### ‚úÖ Validation Phase 6
- [ ] Consentement g√©r√©
- [ ] Export de donn√©es fonctionnel
- [ ] Suppression de donn√©es op√©rationnelle
- [ ] Documentation RGPD compl√®te

---

## Phase 7 : TESTS & VALIDATION (3-4 jours) üß™

> **Objectif** : Validation compl√®te de la s√©curit√©

### √âtape 7.1 : Tests de p√©n√©tration basiques (2 jours)

#### Tests automatis√©s
```bash
# Scan de vuln√©rabilit√©s
nmap -sV -sC votre-domaine.com
nikto -h https://votre-domaine.com

# Tests d'authentification
# Tests d'autorisation
# Tests d'injection SQL
```

### √âtape 7.2 : Tests utilisateur (1 jour)

#### Sc√©narios de test
- Connexion/d√©connexion
- Navigation par r√¥le
- Tentatives d'acc√®s non autoris√©
- Fonctionnalit√©s m√©tier

### √âtape 7.3 : Audit de s√©curit√© (1 jour)

#### Checklist finale
- [ ] OWASP Top 10 addressed
- [ ] Tous les ports non essentiels ferm√©s
- [ ] SSL/TLS configur√© partout
- [ ] Authentification forte active
- [ ] Autorisation granulaire op√©rationnelle
- [ ] Monitoring et alertes fonctionnels
- [ ] Conformit√© RGPD assur√©e

### ‚úÖ Validation Phase 7
- [ ] Tests de p√©n√©tration r√©ussis
- [ ] Tests utilisateur valid√©s
- [ ] Audit de s√©curit√© compl√©t√©
- [ ] Documentation de s√©curit√© finalis√©e

---

## üéØ Planning d√©taill√© par semaine

### **Semaine 1 : Urgence + Traefik**
- **Jour 1** : Phase 1 compl√®te (urgence s√©curitaire)
- **Jour 2-3** : Pr√©paration Traefik + Configuration
- **Jour 4-5** : D√©ploiement Traefik + Tests

### **Semaine 2 : Authentification**  
- **Jour 1-2** : Configuration provider d'auth (Kinde/Supabase)
- **Jour 3** : D√©finition des r√¥les et permissions
- **Jour 4-5** : Pages de connexion + Middleware

### **Semaine 3 : Base de donn√©es + Monitoring**
- **Jour 1-2** : Row Level Security + Chiffrement  
- **Jour 3** : Syst√®me d'audit et logs
- **Jour 4-5** : Monitoring + Alertes

### **Semaine 4 : RGPD + Tests**
- **Jour 1-2** : Conformit√© RGPD
- **Jour 3-5** : Tests de s√©curit√© + Validation finale

---

## üí∞ Budget estim√©

### Co√ªts mensuels
- **Domaine SSL** : Gratuit (Let's Encrypt)
- **Kinde Auth** : ~15‚Ç¨/mois (50 utilisateurs)
- **Monitoring** : ~10‚Ç¨/mois (Grafana Cloud optionnel)
- **Backup s√©curis√©** : ~5‚Ç¨/mois

**Total : ~30‚Ç¨/mois** pour s√©curit√© niveau enterprise

### Co√ªt d√©veloppement (one-shot)
- **Impl√©mentation** : 15-20 jours d√©veloppeur
- **Tests s√©curit√©** : 3-4 jours  
- **Documentation** : 1-2 jours

---

## üö® Actions IMM√âDIATES (√† faire aujourd'hui)

### ‚ö° Top 3 priorit√©s absolues :

1. **FERMER le port 5433** (base de donn√©es expos√©e)
   ```bash
   # Sur le serveur VPS
   nano /home/supabase-project/docker-compose.yml
   # Supprimer la ligne "5433:5432" 
   docker compose down && docker compose up -d
   ```

2. **CONFIGURER le firewall restrictif**
   ```bash
   sudo ufw --force reset
   sudo ufw default deny incoming  
   sudo ufw allow 22,80,443,3000,8001
   sudo ufw --force enable
   ```

3. **CR√âER une sauvegarde de s√©curit√©**
   ```bash
   cd /home/supabase-project
   tar -czf backup-$(date +%Y%m%d).tar.gz volumes/ docker-compose.yml .env
   ```

---

## üìã Checklist de d√©marrage

### √Ä faire MAINTENANT :
- [ ] Fermer le port 5433 (base de donn√©es)
- [ ] Configurer firewall restrictif
- [ ] Cr√©er sauvegarde compl√®te
- [ ] Choisir provider d'auth (Kinde vs Supabase)
- [ ] R√©server nom de domaine (si n√©cessaire)

### √Ä pr√©parer cette semaine :
- [ ] Architecture Traefik 
- [ ] Configuration SSL
- [ ] Tests de migration
- [ ] Plan de rollback

---

## ‚úÖ M√©triques de r√©ussite

### S√©curit√© r√©seau
- **Avant** : 5+ ports expos√©s ‚Üí **Apr√®s** : 2 ports (80/443)
- **Avant** : DB accessible ‚Üí **Apr√®s** : DB isol√©e
- **Avant** : Pas de SSL ‚Üí **Apr√®s** : SSL partout

### Authentification  
- **Avant** : Aucune auth ‚Üí **Apr√®s** : Auth forte + 2FA
- **Avant** : Pas de r√¥les ‚Üí **Apr√®s** : R√¥les granulaires
- **Avant** : Pas d'audit ‚Üí **Apr√®s** : Logs complets

### Conformit√©
- **Avant** : Non conforme RGPD ‚Üí **Apr√®s** : Conforme RGPD
- **Avant** : Pas de monitoring ‚Üí **Apr√®s** : Surveillance temps r√©el

---

## üéØ Prochaine action recommand√©e

**COMMENCER PAR LA PHASE 1 - URGENCE S√âCURITAIRE**

C'est la plus simple ET la plus critique :
- ‚úÖ 30 minutes de travail
- ‚úÖ Impact s√©curitaire √©norme  
- ‚úÖ Z√©ro risque pour l'application
- ‚úÖ R√©sultat imm√©diat visible

**√ätes-vous pr√™t √† fermer le port 5433 maintenant ?** üö®