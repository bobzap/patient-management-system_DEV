# Dockerfile.prod - Version optimisée et sécurisée
FROM node:18-slim AS base

# Installation sécurisée des dépendances système
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    openssl \
    ca-certificates \
    tini \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# Stage 1: Dependencies de production
FROM base AS deps
WORKDIR /app
COPY package.json package-lock.json* ./
RUN npm ci --only=production --audit --fund=false \
    && npm cache clean --force

# Stage 2: Builder
FROM base AS builder
WORKDIR /app
COPY package.json package-lock.json* ./
RUN npm ci --audit --fund=false

COPY . .
COPY prisma ./prisma/

# Générer Prisma Client puis build
RUN npx prisma generate
RUN npm run build

# Stage 3: Production ultra-sécurisée
FROM base AS runner
WORKDIR /app

# Créer utilisateur système non-privilégié
RUN addgroup --system --gid 1001 nodejs \
    && adduser --system --uid 1001 --gid 1001 nextjs \
    && mkdir -p /app/.next \
    && chown -R nextjs:nodejs /app

# Copier UNIQUEMENT les fichiers de production nécessaires
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./package.json

# Copier Prisma (runtime seulement)
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/@prisma ./node_modules/@prisma

# Sécurité finale
USER nextjs

# Configuration
EXPOSE 3000
ENV NODE_ENV=production
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Point d'entrée sécurisé avec tini
ENTRYPOINT ["/usr/bin/tini", "--"]
CMD ["npm", "start"]