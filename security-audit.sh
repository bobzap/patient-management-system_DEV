#!/bin/bash
# Script d'audit de s√©curit√© pour Vital Sync

echo "üîí AUDIT DE S√âCURIT√â - VITAL SYNC"
echo "================================="

# Variables
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Compteur de probl√®mes
ISSUES=0

echo -e "\n1. üîç Recherche de console.log dangereux..."
CONSOLE_LOGS=$(grep -r "console\.log" src/ --include="*.ts" --include="*.tsx" | grep -v "NODE_ENV" | wc -l)
if [ $CONSOLE_LOGS -gt 0 ]; then
    echo -e "${RED}‚ùå $CONSOLE_LOGS console.log trouv√©s dans le code${NC}"
    echo "Fichiers concern√©s :"
    grep -r "console\.log" src/ --include="*.ts" --include="*.tsx" | grep -v "NODE_ENV" | head -5
    ISSUES=$((ISSUES + 1))
else
    echo -e "${GREEN}‚úÖ Aucun console.log dangereux trouv√©${NC}"
fi

echo -e "\n2. üîê V√©rification des variables d'environnement..."
if [ -f ".env.local" ]; then
    NEXT_PUBLIC_SECRETS=$(grep "NEXT_PUBLIC_.*SECRET\|NEXT_PUBLIC_.*PASSWORD\|NEXT_PUBLIC_.*KEY" .env.local | wc -l)
    if [ $NEXT_PUBLIC_SECRETS -gt 0 ]; then
        echo -e "${RED}‚ùå Variables secr√®tes expos√©es c√¥t√© client d√©tect√©es${NC}"
        grep "NEXT_PUBLIC_.*SECRET\|NEXT_PUBLIC_.*PASSWORD\|NEXT_PUBLIC_.*KEY" .env.local
        ISSUES=$((ISSUES + 1))
    else
        echo -e "${GREEN}‚úÖ Pas de secrets expos√©s c√¥t√© client${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è Fichier .env.local non trouv√©${NC}"
fi

echo -e "\n3. üõ°Ô∏è V√©rification des d√©pendances..."
npm audit --audit-level moderate > /dev/null 2>&1
AUDIT_RESULT=$?
if [ $AUDIT_RESULT -ne 0 ]; then
    echo -e "${RED}‚ùå Vuln√©rabilit√©s de s√©curit√© d√©tect√©es dans les d√©pendances${NC}"
    echo "Ex√©cutez: npm audit pour plus de d√©tails"
    ISSUES=$((ISSUES + 1))
else
    echo -e "${GREEN}‚úÖ D√©pendances s√©curis√©es${NC}"
fi

echo -e "\n4. üîí V√©rification des routes API..."
UNPROTECTED_ROUTES=$(grep -r "export async function" src/app/api/ --include="*.ts" | grep -v "getServerSession" | wc -l)
if [ $UNPROTECTED_ROUTES -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è $UNPROTECTED_ROUTES routes API potentiellement non prot√©g√©es${NC}"
    echo "V√©rifiez manuellement l'authentification sur chaque route"
else
    echo -e "${GREEN}‚úÖ Toutes les routes semblent prot√©g√©es${NC}"
fi

echo -e "\n5. üìù V√©rification des logs sensibles..."
SENSITIVE_LOGS=$(grep -r "password\|token\|secret" src/ --include="*.ts" --include="*.tsx" | grep "console\|log" | wc -l)
if [ $SENSITIVE_LOGS -gt 0 ]; then
    echo -e "${RED}‚ùå Logs de donn√©es sensibles d√©tect√©s${NC}"
    grep -r "password\|token\|secret" src/ --include="*.ts" --include="*.tsx" | grep "console\|log"
    ISSUES=$((ISSUES + 1))
else
    echo -e "${GREEN}‚úÖ Pas de logs de donn√©es sensibles${NC}"
fi

echo -e "\n6. üåê V√©rification des headers de s√©curit√©..."
if grep -q "X-Frame-Options\|X-Content-Type-Options\|X-XSS-Protection" src/app/layout.tsx; then
    echo -e "${GREEN}‚úÖ Headers de s√©curit√© configur√©s${NC}"
else
    echo -e "${RED}‚ùå Headers de s√©curit√© manquants${NC}"
    ISSUES=$((ISSUES + 1))
fi

echo -e "\n7. üö´ V√©rification des hardcoded secrets..."
HARDCODED_SECRETS=$(grep -r "password.*=.*[\"'].*[\"']\|secret.*=.*[\"'].*[\"']\|key.*=.*[\"'].*[\"']" src/ --include="*.ts" --include="*.tsx" | wc -l)
if [ $HARDCODED_SECRETS -gt 0 ]; then
    echo -e "${RED}‚ùå Secrets potentiellement hardcod√©s d√©tect√©s${NC}"
    ISSUES=$((ISSUES + 1))
else
    echo -e "${GREEN}‚úÖ Pas de secrets hardcod√©s d√©tect√©s${NC}"
fi

echo -e "\n8. üì¶ V√©rification du fichier package.json..."
if grep -q "\"start\".*\"next start\"" package.json; then
    echo -e "${GREEN}‚úÖ Script de production configur√©${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è V√©rifiez la configuration de production${NC}"
fi

# R√©sum√©
echo -e "\nüéØ R√âSUM√â DE L'AUDIT"
echo "==================="
if [ $ISSUES -eq 0 ]; then
    echo -e "${GREEN}‚úÖ EXCELLENT ! Aucun probl√®me critique d√©tect√©${NC}"
    echo -e "Score de s√©curit√©: ${GREEN}üü¢ √âLEV√â${NC}"
elif [ $ISSUES -le 2 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  $ISSUES probl√®me(s) d√©tect√©(s) - Corrections recommand√©es${NC}"
    echo -e "Score de s√©curit√©: ${YELLOW}üü° MOYEN${NC}"
else
    echo -e "${RED}‚ùå $ISSUES probl√®mes critiques d√©tect√©s - CORRECTIONS URGENTES${NC}"
    echo -e "Score de s√©curit√©: ${RED}üî¥ FAIBLE${NC}"
fi

echo -e "\nüìã ACTIONS RECOMMAND√âES:"
if [ $CONSOLE_LOGS -gt 0 ]; then
    echo "1. Supprimer ou conditionner tous les console.log"
fi
if [ $NEXT_PUBLIC_SECRETS -gt 0 ]; then
    echo "2. D√©placer les secrets vers des variables serveur"
fi
if [ $UNPROTECTED_ROUTES -gt 0 ]; then
    echo "3. V√©rifier l'authentification sur toutes les routes API"
fi
if [ $SENSITIVE_LOGS -gt 0 ]; then
    echo "4. Supprimer les logs de donn√©es sensibles"
fi
if [ $ISSUES -eq 0 ]; then
    echo "‚úÖ Continuer la surveillance et effectuer des audits r√©guliers"
fi

echo -e "\nüîó RESSOURCES UTILES:"
echo "- Documentation s√©curit√© Next.js: https://nextjs.org/docs/advanced-features/security-headers"
echo "- OWASP Top 10: https://owasp.org/www-project-top-ten/"
echo "- Guide s√©curit√© React: https://snyk.io/blog/10-react-security-best-practices/"

exit $ISSUES