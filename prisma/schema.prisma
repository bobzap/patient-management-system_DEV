generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model AuthLog {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  action    String
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  success   Boolean
  details   Json?
  createdAt DateTime @default(now()) @map("created_at")
  user      AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_logs")
}

model AuthUser {
  id                  String            @id @default(cuid())
  email               String            @unique
  password            String
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")
  accounts            Account[]
  logs                AuthLog[]
  createdInvitations  InvitationToken[] @relation("InvitationCreator")
  receivedInvitations InvitationToken[] @relation("InvitationRecipient")
  sessions            Session[]
  profile             UserProfile?

  @@map("auth_users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model UserProfile {
  id            String    @id @default(cuid())
  userId        String    @unique @map("user_id")
  name          String?
  email         String    @unique
  role          UserRole  @default(INFIRMIER)
  isActive      Boolean   @default(true) @map("is_active")
  isWhitelisted Boolean   @default(false) @map("is_whitelisted")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastLogin     DateTime? @map("last_login")
  user          AuthUser  @relation(fields: [userId], references: [id], onDelete: Cascade)
  mfa           UserMFA?

  @@map("user_profiles")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model InvitationToken {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  userId    String    @map("user_id")
  createdBy String    @map("created_by")
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  isUsed    Boolean   @default(false) @map("is_used")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  creator   AuthUser  @relation("InvitationCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  user      AuthUser  @relation("InvitationRecipient", fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([email])
  @@index([expiresAt])
  @@index([isUsed])
  @@map("invitation_tokens")
}

model CalendarEvent {
  id              Int         @id @default(autoincrement())
  title           String
  description     String?
  startDate       DateTime
  endDate         DateTime
  allDay          Boolean     @default(false)
  eventTypeString String?     @map("eventType")
  status          String      @default("planifie")
  patientId       Int?
  entretienId     Int?
  metadata        String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  createdBy       String?
  recurrence      String?
  parentEventId   Int?
  entretien       Entretien?  @relation(fields: [entretienId], references: [id])
  patient         Patient?    @relation(fields: [patientId], references: [id])
  eventTypes      EventType[] @relation("EventTypeToCalendarEvent")

  @@index([entretienId])
  @@index([patientId])
  @@index([startDate, endDate])
}

model Entretien {
  id               Int             @id @default(autoincrement())
  patientId        Int
  numeroEntretien  Int
  dateCreation     DateTime        @default(now())
  dateModification DateTime        @updatedAt
  status           String          @default("brouillon")
  isTemplate       Boolean         @default(false)
  baseEntretienId  Int?
  donneesEntretien String
  tempsDebut       DateTime?
  tempsFin         DateTime?
  tempsPause       Int?
  enPause          Boolean         @default(false)
  dernierePause    DateTime?
  calendarEvents   CalendarEvent[]
  patient          Patient         @relation(fields: [patientId], references: [id])
}

model EventType {
  id        Int             @id @default(autoincrement())
  name      String          @unique
  color     String?         @default("#3b82f6")
  icon      String?
  active    Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  events    CalendarEvent[] @relation("EventTypeToCalendarEvent")
}

model FormConfiguration {
  id        Int           @id @default(autoincrement())
  pageId    String        @unique
  name      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  sections  FormSection[]

  @@index([pageId])
}

model FormField {
  id           Int           @id @default(autoincrement())
  sectionId    Int
  name         String
  label        String
  type         String
  required     Boolean       @default(false)
  order        Int
  listId       String?
  defaultValue String?
  validation   String?
  positionX    Int           @default(0)
  positionY    Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  list         ListCategory? @relation(fields: [listId], references: [listId])
  section      FormSection   @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([sectionId, name])
  @@index([listId])
  @@index([sectionId, order])
}

model FormSection {
  id        Int               @id @default(autoincrement())
  name      String
  label     String
  order     Int
  formId    Int
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  fields    FormField[]
  form      FormConfiguration @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@unique([formId, name])
  @@index([formId, order])
}

model ListCategory {
  id        Int         @id @default(autoincrement())
  listId    String      @unique
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  fields    FormField[]
  items     ListItem[]
}

model ListItem {
  id         Int          @id @default(autoincrement())
  value      String
  order      Int
  categoryId Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  category   ListCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, value])
  @@index([categoryId, order])
}

model Patient {
  id                Int             @id @default(autoincrement())
  civilites         String
  nom               String
  prenom            String
  dateNaissance     String
  age               Int
  etatCivil         String
  poste             String
  numeroLigne       String?
  manager           String
  zone              String
  horaire           String?
  contrat           String
  tauxActivite      String
  departement       String
  dateEntree        String
  anciennete        String
  tempsTrajetAller  String
  tempsTrajetRetour String
  typeTransport     String
  numeroEntretien   Int?
  nomEntretien      String?
  dateEntretien     String?
  heureDebut        String?
  heureFin          String?
  duree             String?
  typeEntretien     String?
  consentement      String?
  dateCreation      String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  tempsTrajetTotal  String?
  calendarEvents    CalendarEvent[]
  entretiens        Entretien[]
}

model RisqueProfessionnel {
  id        Int      @id @default(autoincrement())
  nom       String
  lien      String
  estFavori Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserMFA {
  id           String     @id @default(cuid())
  userId       String     @unique @map("user_id")
  secret       String     // Secret TOTP chiffré
  isEnabled    Boolean    @default(false) @map("is_enabled")
  backupCodes  String[]   @map("backup_codes") // Codes de récupération chiffrés
  createdAt    DateTime   @default(now()) @map("created_at")
  enabledAt    DateTime?  @map("enabled_at")
  lastUsedAt   DateTime?  @map("last_used_at")
  failedAttempts Int      @default(0) @map("failed_attempts")
  lockedUntil  DateTime?  @map("locked_until")
  userProfile  UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_mfa")
}

model RateLimit {
  id         String   @id @default(cuid())
  identifier String   // IP ou IP:userId
  type       String   // 'auth', 'mfa', 'setup'
  count      Int      @default(0)
  windowStart DateTime @default(now()) @map("window_start")
  resetTime  DateTime @map("reset_time")
  isBlocked  Boolean  @default(false) @map("is_blocked")
  blockUntil DateTime? @map("block_until")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, type], name: "identifier_type")
  @@index([resetTime])
  @@index([isBlocked])
  @@map("rate_limits")
}

enum UserRole {
  ADMIN
  INFIRMIER
  INFIRMIER_CHEF
  MEDECIN

  @@map("user_role")
}
